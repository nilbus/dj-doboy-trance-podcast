#!/usr/bin/env ruby

require 'active_support/all'
require 'erb'
require 'fileutils'

AudioFile = Struct.new('AudioFile', :podcast, :episode, :url, keyword_init: true)

root = File.expand_path(File.join(File.dirname(__FILE__), '..'))
template_dir = File.join(root, "templates")
s3_subdir = ARGV[0] || 'the-well-trained-mind'

# the-well-trained-mind/
# the-well-trained-mind/The Dragon Diaries/01 Preface.mp3
# the-well-trained-mind/The Dragon Diaries/02 The Dragon And His Grandmother.mp3
# the-well-trained-mind/The Dragon Diaries/03 The Four Chinese Dragons.mp3
# the-well-trained-mind/The Dragon Diaries/04 The Samurais Daughter.mp3
# the-well-trained-mind/The Dragon Diaries/05 Kur The First Dragon.mp3
# the-well-trained-mind/The Dragon Diaries/06 The Romani Andthe Dragon.mp3
# the-well-trained-mind/The Dragon Diaries/07 Bida The Dragon Of Gold.mp3
# the-well-trained-mind/The Dragon Diaries/08 The Dragon Mother.mp3
paths = %x(aws s3 ls 's3://nilbus-podcasts/#{s3_subdir}' --recursive | awk '{for(i=4;i<=NF;i++) printf("%s%s", $i, (i<NF)?" ":"\\n")}').split("\n")
extensions = %w[mp3 m4b]
paths.select! { |path| extensions.any? { |ext| path.end_with?(".#{ext}") } }
raise "Couldn't list paths. Got:\n#{paths.join("\n")}" unless paths.many?
audio_files = paths.map do |path|
  match_data = path.match(%r{^[^/]+/(?<podcast>[^/]+)/(?<episode>[^.]+)\..+$})
  raise "Couldn't make sense of #{path.inspect}" unless match_data
  url = "https://nilbus-podcasts.s3.us-east-2.amazonaws.com/#{URI::DEFAULT_PARSER.escape(path)}"
  AudioFile.new(**match_data.named_captures, url: url)
end
podcasts = audio_files.group_by(&:podcast)

podcasts.each do |podcast_name, audio_files|
  podcast_path_name = podcast_name.parameterize

  # copy & mod podcast xml template
  template = File.read(File.join(template_dir, 'podcast.xml.erb'))
  erb = ERB.new(template)
  filled_template = erb.result_with_hash({ podcast_name: podcast_name })
  xml_path = File.join(root, "#{podcast_path_name}.xml")
  File.write(xml_path, filled_template)

  posts_dir = File.join(root, '_posts', podcast_path_name)
  FileUtils.rm_rf posts_dir
  FileUtils.mkdir_p posts_dir

  use_prefix = !audio_files.map(&:episode).all? { |ep| ep =~ /^[0-9]{2}/ }

  # copy & mod episode markdown template
  audio_files.each.with_index(1) do |audio_file, i|
    template = File.read(File.join(template_dir, 'episode.markdown.erb'))
    erb = ERB.new(template)
    filled_template = erb.result_with_hash({
      podcast_name: podcast_name,
      episode_name: audio_file.episode,
      url: audio_file.url,
      publish_date: fixed_date = (DateTime.new(2023, 7, 9, 6, 0, 0, '-0500') + i.minutes).strftime("2023-07-09 %H:%M:00 -0500")
    })
    filename = "#{audio_file.episode.parameterize}.markdown"
    filename = ('%02d ' % i) + filename if use_prefix
    filename = "0000-00-00-" + filename
    post_path = File.join(posts_dir, filename)
    File.write(post_path, filled_template)
  end

  # create index
  template = File.read(File.join(template_dir, 'the-well-trained-mind.markdown.erb'))
  erb = ERB.new(template)
  filled_template = erb.result_with_hash({ podcasts: podcasts })
  index_path = File.join(root, "the-well-trained-mind.markdown")
  File.write(index_path, filled_template)
end
